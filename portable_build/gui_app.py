"""
Simple GUI for Price Monitor
Shows progress and status during execution
"""
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import sys
import os
from pathlib import Path
import subprocess
from datetime import datetime
import shutil

# Add parent directory to path
SCRIPT_DIR = Path(__file__).parent.parent
sys.path.insert(0, str(SCRIPT_DIR))

from portable_build.config_loader import ConfigLoader


class PriceMonitorGUI:
    """Simple GUI for Price Monitor"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Price Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω DeLonghi")
        self.root.geometry("700x600")
        self.root.resizable(False, False)
        
        self.config = None
        self.is_running = False
        
        self.setup_ui()
        self.check_config()
    
    def setup_ui(self):
        """Setup user interface"""
        # Header
        header = tk.Frame(self.root, bg="#2c3e50", height=80)
        header.pack(fill=tk.X)
        
        title = tk.Label(
            header, 
            text="Price Monitor",
            font=("Arial", 20, "bold"),
            bg="#2c3e50",
            fg="white"
        )
        title.pack(pady=10)
        
        subtitle = tk.Label(
            header,
            text="–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ DeLonghi",
            font=("Arial", 10),
            bg="#2c3e50",
            fg="#ecf0f1"
        )
        subtitle.pack()
        
        # Main content
        content = tk.Frame(self.root, padx=20, pady=20)
        content.pack(fill=tk.BOTH, expand=True)
        
        # Status section
        status_frame = tk.LabelFrame(content, text="–°—Ç–∞—Ç—É—Å", font=("Arial", 10, "bold"), padx=10, pady=10)
        status_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.status_label = tk.Label(
            status_frame,
            text="–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É",
            font=("Arial", 11),
            fg="#27ae60"
        )
        self.status_label.pack()
        
        self.inventory_label = tk.Label(
            status_frame,
            text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤...",
            font=("Arial", 9),
            fg="#7f8c8d"
        )
        self.inventory_label.pack()
        
        # Progress section
        progress_frame = tk.LabelFrame(content, text="–ü—Ä–æ–≥—Ä–µ—Å—Å", font=("Arial", 10, "bold"), padx=10, pady=10)
        progress_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.progress_label = tk.Label(
            progress_frame,
            text="–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞...",
            font=("Arial", 9)
        )
        self.progress_label.pack(pady=(0, 5))
        
        self.progress_bar = ttk.Progressbar(
            progress_frame,
            mode='indeterminate',
            length=600
        )
        self.progress_bar.pack(fill=tk.X)
        
        # Log section
        log_frame = tk.LabelFrame(content, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", font=("Arial", 10, "bold"), padx=10, pady=10)
        log_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            height=12,
            font=("Consolas", 9),
            bg="#f8f9fa",
            fg="#2c3e50"
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # Buttons
        button_frame = tk.Frame(content)
        button_frame.pack(fill=tk.X)
        
        self.start_button = tk.Button(
            button_frame,
            text="‚ñ∂ –ó–ê–ü–£–°–¢–ò–¢–¨ –ú–û–ù–ò–¢–û–†–ò–ù–ì",
            command=self.start_monitoring,
            font=("Arial", 12, "bold"),
            bg="#27ae60",
            fg="white",
            height=2,
            cursor="hand2"
        )
        self.start_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        self.open_button = tk.Button(
            button_frame,
            text="üìÅ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            command=self.open_output,
            font=("Arial", 10),
            bg="#3498db",
            fg="white",
            state=tk.DISABLED
        )
        self.open_button.pack(side=tk.LEFT, padx=5)
        
        self.exit_button = tk.Button(
            button_frame,
            text="‚úï –í—ã—Ö–æ–¥",
            command=self.exit_app,
            font=("Arial", 10),
            bg="#e74c3c",
            fg="white"
        )
        self.exit_button.pack(side=tk.LEFT, padx=(5, 0))
    
    def check_config(self):
        """Check configuration and inventory file"""
        try:
            self.config = ConfigLoader()
            self.log("‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            # Check inventory
            inventory_path = self.config.paths['inventory']
            inventory_files = list(inventory_path.glob('–æ—Å—Ç–∞—Ç–∫–∏.*'))
            inventory_files = [f for f in inventory_files if f.suffix in ['.xls', '.xlsx']]
            
            if inventory_files:
                self.log(f"‚úì –§–∞–π–ª –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞–π–¥–µ–Ω: {inventory_files[0].name}")
                self.inventory_label.config(
                    text=f"‚úì –§–∞–π–ª –æ—Å—Ç–∞—Ç–∫–æ–≤: {inventory_files[0].name}",
                    fg="#27ae60"
                )
            else:
                self.log("‚úó –§–∞–π–ª –æ—Å—Ç–∞—Ç–∫–æ–≤ –ù–ï –Ω–∞–π–¥–µ–Ω!")
                self.inventory_label.config(
                    text="‚úó –ü–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª '–æ—Å—Ç–∞—Ç–∫–∏.xls' –≤ –ø–∞–ø–∫—É inventory/",
                    fg="#e74c3c"
                )
                self.start_button.config(state=tk.DISABLED)
                
        except Exception as e:
            self.log(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.status_label.config(text="–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫", fg="#e74c3c")
    
    def log(self, message):
        """Add message to log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update()
    
    def update_status(self, text, color="#3498db"):
        """Update status label"""
        self.status_label.config(text=text, fg=color)
        self.root.update()
    
    def update_progress(self, text):
        """Update progress label"""
        self.progress_label.config(text=text)
        self.root.update()
    
    def start_monitoring(self):
        """Start monitoring in background thread"""
        if self.is_running:
            return
        
        self.is_running = True
        self.start_button.config(state=tk.DISABLED)
        self.progress_bar.start(10)
        
        # Run in thread
        thread = threading.Thread(target=self.run_monitoring)
        thread.daemon = True
        thread.start()
    
    def run_monitoring(self):
        """Run the actual monitoring process"""
        try:
            self.update_status("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...", "#f39c12")
            self.log("\n" + "="*60)
            self.log("–ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –¶–ï–ù")
            self.log("="*60)
            
            # Step 1: Check inventory
            self.update_progress("–®–∞–≥ 1/6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤...")
            self.log("\n[1/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤...")
            
            inventory_path = self.config.paths['inventory']
            inventory_files = list(inventory_path.glob('–æ—Å—Ç–∞—Ç–∫–∏.*'))
            inventory_files = [f for f in inventory_files if f.suffix in ['.xls', '.xlsx']]
            
            if not inventory_files:
                raise Exception("–§–∞–π–ª –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
            self.log(f"  ‚úì –ù–∞–π–¥–µ–Ω: {inventory_files[0].name}")
            
            # Step 2: Run scrapers
            self.update_progress("–®–∞–≥ 2/6: –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (3-5 –º–∏–Ω—É—Ç)...")
            self.log("\n[2/6] –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...")
            self.log("  –≠—Ç–æ –∑–∞–π–º–µ—Ç 3-5 –º–∏–Ω—É—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            # Run full cycle from main project
            main_script = SCRIPT_DIR / 'run_full_cycle.py'
            
            self.log(f"\n  –ó–∞–ø—É—Å–∫: {main_script.name}")
            
            result = subprocess.run(
                [sys.executable, str(main_script)],
                cwd=str(SCRIPT_DIR),
                capture_output=True,
                text=True,
                timeout=900  # 15 minutes max
            )
            
            if result.returncode != 0:
                raise Exception(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.stderr[:500]}")
            
            # Parse output
            output_lines = result.stdout.split('\n')
            
            # Find key information
            for line in output_lines:
                if 'ALTA' in line and 'SUCCESS' in line:
                    self.log("  ‚úì ALTA: —É—Å–ø–µ—à–Ω–æ")
                elif 'KONTAKT' in line and 'SUCCESS' in line:
                    self.log("  ‚úì KONTAKT: —É—Å–ø–µ—à–Ω–æ")
                elif 'ELITE' in line and 'SUCCESS' in line:
                    self.log("  ‚úì ELITE: —É—Å–ø–µ—à–Ω–æ")
                elif 'DIM_KAVA' in line and 'SUCCESS' in line:
                    self.log("  ‚úì DIM_KAVA: —É—Å–ø–µ—à–Ω–æ")
            
            # Step 3: Find results
            self.update_progress("–®–∞–≥ 3/6: –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            self.log("\n[3/6] –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            
            source_output = SCRIPT_DIR / 'data' / 'output'
            
            # Find latest files
            excel_files = list(source_output.glob('price_comparison_*.xlsx'))
            word_files = list(source_output.glob('executive_report_*.docx'))
            pdf_files = list(source_output.glob('executive_report_*.pdf'))
            
            latest_excel = max(excel_files, key=lambda x: x.stat().st_mtime) if excel_files else None
            latest_word = max(word_files, key=lambda x: x.stat().st_mtime) if word_files else None
            latest_pdf = max(pdf_files, key=lambda x: x.stat().st_mtime) if pdf_files else None
            
            # Step 4: Copy results
            self.update_progress("–®–∞–≥ 4/6: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            self.log("\n[4/6] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            
            results_copied = []
            
            if latest_excel:
                dest = self.config.paths['excel'] / latest_excel.name
                shutil.copy2(latest_excel, dest)
                self.log(f"  ‚úì Excel: {latest_excel.name}")
                results_copied.append(('excel', dest))
            
            if latest_word:
                dest = self.config.paths['reports'] / latest_word.name
                shutil.copy2(latest_word, dest)
                self.log(f"  ‚úì Word:  {latest_word.name}")
                results_copied.append(('word', dest))
            
            if latest_pdf:
                dest = self.config.paths['reports'] / latest_pdf.name
                shutil.copy2(latest_pdf, dest)
                self.log(f"  ‚úì PDF:   {latest_pdf.name}")
                results_copied.append(('pdf', dest))
            
            # Step 5: Show statistics
            self.update_progress("–®–∞–≥ 5/6: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            self.log("\n[5/6] –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            
            # Parse statistics from output
            for line in output_lines:
                if 'Products compared:' in line or 'TOTAL PRODUCTS' in line:
                    self.log(f"  {line.strip()}")
                elif 'Total quantity:' in line or 'Total value:' in line:
                    self.log(f"  {line.strip()}")
            
            # Step 6: Complete
            self.update_progress("–®–∞–≥ 6/6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            self.log("\n[6/6] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            
            self.log("\n" + "="*60)
            self.log("‚úì –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            self.log("="*60)
            self.log(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: output/")
            self.log(f"  - Excel —Ç–∞–±–ª–∏—Ü—ã: output/excel/")
            self.log(f"  - –û—Ç—á–µ—Ç—ã:        output/reports/")
            
            # Update UI
            self.progress_bar.stop()
            self.update_status("‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", "#27ae60")
            self.update_progress("–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ output/")
            
            self.start_button.config(state=tk.NORMAL)
            self.open_button.config(state=tk.NORMAL)
            
            # Show success message
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö!",
                f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results_copied)}\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ: output/\n\n"
                f"–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏?"
            )
            
            # Auto-open if configured
            if self.config and self.config.general['open_report']:
                self.open_output()
            
        except Exception as e:
            self.log(f"\n‚úó –û–®–ò–ë–ö–ê: {e}")
            self.progress_bar.stop()
            self.update_status("‚úó –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "#e74c3c")
            self.update_progress("–û—à–∏–±–∫–∞! –°–º. –ª–æ–≥ –≤—ã—à–µ")
            self.start_button.config(state=tk.NORMAL)
            
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n{str(e)[:200]}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                f"1. –§–∞–π–ª –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø–∞–ø–∫–µ inventory/\n"
                f"2. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                f"3. –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ–∫–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
            )
        
        finally:
            self.is_running = False
    
    def open_output(self):
        """Open output folder"""
        if self.config:
            output_path = self.config.paths['output']
            os.startfile(output_path)
            self.log(f"\n‚úì –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞: {output_path}")
    
    def exit_app(self):
        """Exit application"""
        if self.is_running:
            if not messagebox.askyesno(
                "–í—ã—Ö–æ–¥",
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"
            ):
                return
        
        self.root.quit()
    
    def run(self):
        """Run the GUI"""
        # Center window
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
        # Run
        self.root.mainloop()


def main():
    """Entry point"""
    app = PriceMonitorGUI()
    app.run()


if __name__ == '__main__':
    main()

